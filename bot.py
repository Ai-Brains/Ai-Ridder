import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from database import Database
from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_ID, MESSAGES, TARIFFS, MAX_TEXT_LENGTH, YOOMONEY_TOKEN, YOOMONEY_WALLET
from roles import ROLES
from deepseek_api import deepseek_api
from payment import PaymentManager
import tiktoken

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
payment_manager = PaymentManager(YOOMONEY_TOKEN, YOOMONEY_WALLET)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    ['üë§ –†–æ–ª–∏', 'üí≥ –ö—É–ø–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã'],
    ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
    ['‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ']
]

# –ú–µ–Ω—é —Ä–æ–ª–µ–π
ROLES_MENU = [
    ['üìñ –ë–µ—Ç–∞-—Ä–∏–¥–µ—Ä', '‚úèÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–æ—Ä'],
    ['üìù –†–µ–¥–∞–∫—Ç–æ—Ä', 'üîô –ù–∞–∑–∞–¥']
]

class BotStates:
    MAIN_MENU = "main_menu"
    ROLE_SELECTION = "role_selection"
    WAITING_FOR_TEXT = "waiting_for_text"
    WAITING_FOR_SUPPORT_MESSAGE = "waiting_for_support_message"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = db.get_user(user_id)
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∫—Ä–µ–¥–∏—Ç–æ–º
        db.create_user(
            user_id=user_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    user_states[user_id] = BotStates.MAIN_MENU
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text(
        MESSAGES['welcome'],
        reply_markup=reply_markup
    )

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    text = update.message.text
    
    db.update_user_activity(user_id)
    
    if text == 'üë§ –†–æ–ª–∏':
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
        user_states[user_id] = BotStates.ROLE_SELECTION
        reply_markup = ReplyKeyboardMarkup(ROLES_MENU, resize_keyboard=True)
        await update.message.reply_text(
            MESSAGES['choose_role'],
            reply_markup=reply_markup
        )
    
    elif text == 'üí≥ –ö—É–ø–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã':
        await show_purchase_menu(update, context)
    
    elif text == 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å':
        credits = db.get_user_credits(user_id)
        purchase_suggestion = MESSAGES['purchase_suggestion'] if credits < 3 else ""
        await update.message.reply_text(
            MESSAGES['balance'].format(
                credits=credits,
                purchase_suggestion=purchase_suggestion
            )
        )
    
    elif text == 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        user_states[user_id] = BotStates.WAITING_FOR_SUPPORT_MESSAGE
        await update.message.reply_text(MESSAGES['support_request'])
    
    elif text == '‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ':
        await update.message.reply_text(MESSAGES['about'])

async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    
    db.update_user_activity(user_id)
    
    if text == 'üîô –ù–∞–∑–∞–¥':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_states[user_id] = BotStates.MAIN_MENU
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
    role_key = None
    if text == 'üìñ –ë–µ—Ç–∞-—Ä–∏–¥–µ—Ä':
        role_key = 'beta_reader'
    elif text == '‚úèÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–æ—Ä':
        role_key = 'proofreader'
    elif text == 'üìù –†–µ–¥–∞–∫—Ç–æ—Ä':
        role_key = 'editor'
    
    if role_key:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['selected_role'] = role_key
        user_states[user_id] = BotStates.WAITING_FOR_TEXT
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
        await update.message.reply_text(
            MESSAGES['role_selected'].format(
                role=ROLES[role_key]['name'],
                max_length=MAX_TEXT_LENGTH
            ),
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], resize_keyboard=True)
        )

async def handle_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    db.update_user_activity(user_id)
    
    if text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_states[user_id] = BotStates.MAIN_MENU
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ–∫–µ–Ω—ã
    is_valid, error_message = deepseek_api.validate_text_length(text)
    if not is_valid:
        await update.message.reply_text(f"‚ùå {error_message}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    credits = db.get_user_credits(user_id)
    if credits < 1:
        await update.message.reply_text(
            MESSAGES['no_credits'].format(credits=credits)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
    selected_role = context.user_data.get('selected_role')
    if not selected_role:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ."
        )
        user_states[user_id] = BotStates.ROLE_SELECTION
        reply_markup = ReplyKeyboardMarkup(ROLES_MENU, resize_keyboard=True)
        await update.message.reply_text(
            MESSAGES['choose_role'],
            reply_markup=reply_markup
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await update.message.reply_text(
        MESSAGES['analyzing'].format(
            role=ROLES[selected_role]['name'],
            length=len(text)
        )
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ DeepSeek API
    try:
        analysis_result, tokens_used = await deepseek_api.analyze_text(selected_role, text)
        
        if analysis_result is None:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API."
            )
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
        if db.spend_credit(user_id):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ
            db.save_analysis(user_id, selected_role, len(text), tokens_used)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            max_message_length = 4096
            if len(analysis_result) <= max_message_length:
                await update.message.reply_text(analysis_result)
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = []
                current_part = ""
                lines = analysis_result.split('\n')
                
                for line in lines:
                    if len(current_part + line + '\n') <= max_message_length:
                        current_part += line + '\n'
                    else:
                        if current_part:
                            parts.append(current_part.strip())
                        current_part = line + '\n'
                
                if current_part:
                    parts.append(current_part.strip())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
                for i, part in enumerate(parts):
                    if i == 0:
                        await update.message.reply_text(f"üìù –ê–Ω–∞–ª–∏–∑ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
                    else:
                        await update.message.reply_text(f"üìù –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            remaining_credits = db.get_user_credits(user_id)
            await update.message.reply_text(
                MESSAGES['analysis_complete'].format(credits=remaining_credits)
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user_states[user_id] = BotStates.MAIN_MENU
            reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
            await update.message.reply_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = update.effective_user.id
    message = update.message.text
    
    db.update_user_activity(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if db.save_support_message(user_id, message):
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            user = update.effective_user
            admin_message = f"üÜò –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            admin_message += f"ID: {user_id}\n"
            admin_message += f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {user.last_name or ''}\n"
            admin_message += f"Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            admin_message += f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}"
            
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=admin_message
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        
        await update.message.reply_text(MESSAGES['support_sent'])
    else:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_states[user_id] = BotStates.MAIN_MENU
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )

async def show_purchase_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤"""
    keyboard = []
    for key, tariff in TARIFFS.items():
        keyboard.append([InlineKeyboardButton(
            tariff['label'], 
            callback_data=f"buy_{key}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        MESSAGES['purchase_menu'],
        reply_markup=reply_markup
    )

async def handle_purchase_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –ø–æ–∫—É–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    if callback_data.startswith('buy_'):
        tariff_key = callback_data.replace('buy_', '')
        if tariff_key in TARIFFS:
            tariff = TARIFFS[tariff_key]
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_info = payment_manager.create_payment_link(user_id, tariff_key)
            
            if payment_info:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info['payment_url'])],
                    [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_info['payment_id']}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message_text = f"""üí≥ –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞: {tariff['label']}

üí∞ –°—É–º–º–∞: {tariff['price']}‚ÇΩ
üéØ –ö—Ä–µ–¥–∏—Ç–æ–≤: {tariff['credits']}

–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ, –∑–∞—Ç–µ–º "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤!"""
                
                await query.edit_message_text(
                    message_text,
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
    
    elif callback_data.startswith('check_'):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        payment_id = callback_data.replace('check_', '')
        
        await query.edit_message_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        is_paid, operation_info = payment_manager.check_payment_status(payment_id)
        
        if is_paid:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            if payment_manager.process_successful_payment(payment_id):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –º–µ—Ç–∫–∏
                payment_info = payment_manager.get_payment_info_from_label(payment_id)
                if payment_info and payment_info['tariff_key'] in TARIFFS:
                    tariff = TARIFFS[payment_info['tariff_key']]
                    credits_added = tariff['credits']
                    
                    current_credits = db.get_user_credits(user_id)
                    
                    success_message = f"""‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {credits_added}
üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã."""
                    
                    await query.edit_message_text(success_message)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    try:
                        admin_message = f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n\n"
                        admin_message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                        admin_message += f"–¢–∞—Ä–∏—Ñ: {tariff['label']}\n"
                        admin_message += f"–°—É–º–º–∞: {tariff['price']}‚ÇΩ\n"
                        admin_message += f"–ö—Ä–µ–¥–∏—Ç–æ–≤: {credits_added}"
                        
                        await context.bot.send_message(
                            chat_id=ADMIN_USER_ID,
                            text=admin_message
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
                else:
                    await query.edit_message_text("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_{payment_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑'.",
                reply_markup=reply_markup
            )
    
    elif callback_data == "cancel_payment":
        await query.edit_message_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def check_payments_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ —Ñ–æ–Ω–µ)"""
    try:
        processed = payment_manager.check_pending_payments()
        if processed:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed)} –ø–ª–∞—Ç–µ–∂–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    current_state = user_states.get(user_id, BotStates.MAIN_MENU)
    
    if current_state == BotStates.MAIN_MENU:
        await handle_main_menu(update, context)
    elif current_state == BotStates.ROLE_SELECTION:
        await handle_role_selection(update, context)
    elif current_state == BotStates.WAITING_FOR_TEXT:
        await handle_text_analysis(update, context)
    elif current_state == BotStates.WAITING_FOR_SUPPORT_MESSAGE:
        await handle_support_message(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_purchase_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

